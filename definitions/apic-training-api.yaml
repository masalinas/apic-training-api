paths:
  '/principals/{id}/accessTokens/{fk}':
    get:
      tags:
        - Principal
      summary: Find a related item by id for accessTokens.
      operationId: Principal.prototype.__findById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Principal id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Principal
      summary: Delete a related item by id for accessTokens.
      operationId: Principal.prototype.__destroyById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Principal id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Principal
      summary: Update a related item by id for accessTokens.
      operationId: Principal.prototype.__updateById__accessTokens
      parameters:
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Principal id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/principals/{id}/accessTokens':
    get:
      tags:
        - Principal
      summary: Queries accessTokens of Principal.
      operationId: Principal.prototype.__get__accessTokens
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Principal id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Principal
      summary: Creates a new instance in accessTokens of this model.
      operationId: Principal.prototype.__create__accessTokens
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
        - name: id
          in: path
          description: Principal id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Principal
      summary: Deletes all accessTokens of this model.
      operationId: Principal.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Principal id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/principals/{id}/accessTokens/count':
    get:
      tags:
        - Principal
      summary: Counts accessTokens of Principal.
      operationId: Principal.prototype.__count__accessTokens
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Principal id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /principals:
    post:
      tags:
        - Principal
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Principal.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Principal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
    put:
      tags:
        - Principal
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Principal.upsert__put_principals
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Principal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
    patch:
      tags:
        - Principal
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Principal.upsert__patch_principals
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Principal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
    get:
      tags:
        - Principal
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Principal.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Principal'
      deprecated: false
  /principals/replaceOrCreate:
    post:
      tags:
        - Principal
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Principal.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Principal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
  /principals/upsertWithWhere:
    post:
      tags:
        - Principal
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Principal.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Principal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
  '/principals/{id}/exists':
    get:
      tags:
        - Principal
      summary: Check whether a model instance exists in the data source.
      operationId: 'Principal.exists__get_principals_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/principals/{id}':
    head:
      tags:
        - Principal
      summary: Check whether a model instance exists in the data source.
      operationId: 'Principal.exists__head_principals_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Principal
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Principal.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
    delete:
      tags:
        - Principal
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Principal.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Principal
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Principal.prototype.updateAttributes__put_principals_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Principal'
        - name: id
          in: path
          description: Principal id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
    patch:
      tags:
        - Principal
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Principal.prototype.updateAttributes__patch_principals_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Principal'
        - name: id
          in: path
          description: Principal id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
  '/principals/{id}/replace':
    post:
      tags:
        - Principal
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Principal.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Principal'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
  /principals/findOne:
    get:
      tags:
        - Principal
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Principal.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Principal'
      deprecated: false
  /principals/update:
    post:
      tags:
        - Principal
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Principal.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Principal'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /principals/count:
    get:
      tags:
        - Principal
      summary: Count instances of the model matched by where from the data source.
      operationId: Principal.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /principals/login:
    post:
      tags:
        - Principal
      summary: Login a user with username/email and password.
      operationId: Principal.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:







                - `user` - `U+007BUserU+007D` - Data of the currently logged in

              user. (`include=user`)


            type: object
      deprecated: false
  /principals/logout:
    post:
      tags:
        - Principal
      summary: Logout a user with access token.
      operationId: Principal.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /principals/confirm:
    get:
      tags:
        - Principal
      summary: Confirm a user registration with email verification token.
      operationId: Principal.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /principals/reset:
    post:
      tags:
        - Principal
      summary: Reset password for a user with email.
      operationId: Principal.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/orders/{id}/orderLines/{fk}':
    get:
      tags:
        - Order
      summary: Find a related item by id for orderLines.
      operationId: Order.prototype.__findById__orderLines
      parameters:
        - name: fk
          in: path
          description: Foreign key for orderLines
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
    delete:
      tags:
        - Order
      summary: Delete a related item by id for orderLines.
      operationId: Order.prototype.__destroyById__orderLines
      parameters:
        - name: fk
          in: path
          description: Foreign key for orderLines
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: Order id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Order
      summary: Update a related item by id for orderLines.
      operationId: Order.prototype.__updateById__orderLines
      parameters:
        - name: fk
          in: path
          description: Foreign key for orderLines
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/OrderLine'
        - name: id
          in: path
          description: Order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
  '/orders/{id}/orderLines':
    get:
      tags:
        - Order
      summary: Queries orderLines of Order.
      operationId: Order.prototype.__get__orderLines
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderLine'
      deprecated: false
    post:
      tags:
        - Order
      summary: Creates a new instance in orderLines of this model.
      operationId: Order.prototype.__create__orderLines
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/OrderLine'
        - name: id
          in: path
          description: Order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
    delete:
      tags:
        - Order
      summary: Deletes all orderLines of this model.
      operationId: Order.prototype.__delete__orderLines
      parameters:
        - name: id
          in: path
          description: Order id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/orders/{id}/orderLines/count':
    get:
      tags:
        - Order
      summary: Counts orderLines of Order.
      operationId: Order.prototype.__count__orderLines
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: Order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /orders:
    post:
      tags:
        - Order
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Order.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
    put:
      tags:
        - Order
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Order.upsert__put_orders
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
    patch:
      tags:
        - Order
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Order.upsert__patch_orders
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
    get:
      tags:
        - Order
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Order.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
      deprecated: false
  /orders/replaceOrCreate:
    post:
      tags:
        - Order
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Order.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
  /orders/upsertWithWhere:
    post:
      tags:
        - Order
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Order.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
  '/orders/{id}/exists':
    get:
      tags:
        - Order
      summary: Check whether a model instance exists in the data source.
      operationId: 'Order.exists__get_orders_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/orders/{id}':
    head:
      tags:
        - Order
      summary: Check whether a model instance exists in the data source.
      operationId: 'Order.exists__head_orders_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Order
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Order.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
    delete:
      tags:
        - Order
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Order.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Order
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Order.prototype.updateAttributes__put_orders_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Order'
        - name: id
          in: path
          description: Order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
    patch:
      tags:
        - Order
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Order.prototype.updateAttributes__patch_orders_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Order'
        - name: id
          in: path
          description: Order id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
  '/orders/{id}/replace':
    post:
      tags:
        - Order
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Order.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
  /orders/findOne:
    get:
      tags:
        - Order
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Order.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
  /orders/update:
    post:
      tags:
        - Order
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Order.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Order'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /orders/count:
    get:
      tags:
        - Order
      summary: Count instances of the model matched by where from the data source.
      operationId: Order.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/orders/{status}/get-orders-by-status':
    get:
      tags:
        - Order
      summary: 'Get Orders by Status Flag with descending order by Shipping Code '
      operationId: Order.getOrdersByStatus
      parameters:
        - name: status
          in: path
          description: Order Status Flag
          required: true
          default: true
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: object
      deprecated: false
  '/orders/{code}/close-order':
    post:
      tags:
        - Order
      summary: Close Order
      operationId: Order.closeOrder
      parameters:
        - name: code
          in: path
          description: Order Code
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: number
                format: double
      deprecated: false
  '/orders/{code}/products/{productCode}/{quantity}/add-order-line':
    post:
      tags:
        - Order
      summary: Add a new Order Line Order
      operationId: Order.addOrderLine
      parameters:
        - name: code
          in: path
          description: Order Code
          required: true
          type: string
        - name: productCode
          in: path
          description: Product Code
          required: true
          type: string
        - name: quantity
          in: path
          description: Quantity
          required: true
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/orderLines/{id}/order':
    get:
      tags:
        - OrderLine
      summary: Fetches belongsTo relation order.
      operationId: OrderLine.prototype.__get__order
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Order'
      deprecated: false
  '/orderLines/{id}/product':
    get:
      tags:
        - OrderLine
      summary: Fetches belongsTo relation product.
      operationId: OrderLine.prototype.__get__product
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  '/orderLines/{id}/stocks/{fk}':
    get:
      tags:
        - OrderLine
      summary: Find a related item by id for stocks.
      operationId: OrderLine.prototype.__findById__stocks
      parameters:
        - name: fk
          in: path
          description: Foreign key for stocks
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    delete:
      tags:
        - OrderLine
      summary: Delete a related item by id for stocks.
      operationId: OrderLine.prototype.__destroyById__stocks
      parameters:
        - name: fk
          in: path
          description: Foreign key for stocks
          required: true
          type: string
          format: JSON
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - OrderLine
      summary: Update a related item by id for stocks.
      operationId: OrderLine.prototype.__updateById__stocks
      parameters:
        - name: fk
          in: path
          description: Foreign key for stocks
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Stock'
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  '/orderLines/{id}/stocks':
    get:
      tags:
        - OrderLine
      summary: Queries stocks of OrderLine.
      operationId: OrderLine.prototype.__get__stocks
      parameters:
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Stock'
      deprecated: false
    post:
      tags:
        - OrderLine
      summary: Creates a new instance in stocks of this model.
      operationId: OrderLine.prototype.__create__stocks
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Stock'
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    delete:
      tags:
        - OrderLine
      summary: Deletes all stocks of this model.
      operationId: OrderLine.prototype.__delete__stocks
      parameters:
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/orderLines/{id}/stocks/count':
    get:
      tags:
        - OrderLine
      summary: Counts stocks of OrderLine.
      operationId: OrderLine.prototype.__count__stocks
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /orderLines:
    post:
      tags:
        - OrderLine
      summary: Create a new instance of the model and persist it into the data source.
      operationId: OrderLine.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/OrderLine'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
    put:
      tags:
        - OrderLine
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: OrderLine.upsert__put_orderLines
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/OrderLine'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
    patch:
      tags:
        - OrderLine
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: OrderLine.upsert__patch_orderLines
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/OrderLine'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
    get:
      tags:
        - OrderLine
      summary: Find all instances of the model matched by filter from the data source.
      operationId: OrderLine.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderLine'
      deprecated: false
  /orderLines/replaceOrCreate:
    post:
      tags:
        - OrderLine
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: OrderLine.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/OrderLine'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
  /orderLines/upsertWithWhere:
    post:
      tags:
        - OrderLine
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: OrderLine.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/OrderLine'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
  '/orderLines/{id}/exists':
    get:
      tags:
        - OrderLine
      summary: Check whether a model instance exists in the data source.
      operationId: 'OrderLine.exists__get_orderLines_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/orderLines/{id}':
    head:
      tags:
        - OrderLine
      summary: Check whether a model instance exists in the data source.
      operationId: 'OrderLine.exists__head_orderLines_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - OrderLine
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: OrderLine.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
    delete:
      tags:
        - OrderLine
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: OrderLine.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - OrderLine
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'OrderLine.prototype.updateAttributes__put_orderLines_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/OrderLine'
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
    patch:
      tags:
        - OrderLine
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'OrderLine.prototype.updateAttributes__patch_orderLines_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/OrderLine'
        - name: id
          in: path
          description: OrderLine id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
  '/orderLines/{id}/replace':
    post:
      tags:
        - OrderLine
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: OrderLine.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/OrderLine'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
  /orderLines/findOne:
    get:
      tags:
        - OrderLine
      summary: Find first instance of the model matched by filter from the data source.
      operationId: OrderLine.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/OrderLine'
      deprecated: false
  /orderLines/update:
    post:
      tags:
        - OrderLine
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: OrderLine.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/OrderLine'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /orderLines/count:
    get:
      tags:
        - OrderLine
      summary: Count instances of the model matched by where from the data source.
      operationId: OrderLine.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /products:
    post:
      tags:
        - Product
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Product.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    put:
      tags:
        - Product
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Product.upsert__put_products
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    patch:
      tags:
        - Product
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Product.upsert__patch_products
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    get:
      tags:
        - Product
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Product.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
      deprecated: false
  /products/replaceOrCreate:
    post:
      tags:
        - Product
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Product.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  /products/upsertWithWhere:
    post:
      tags:
        - Product
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Product.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  '/products/{id}/exists':
    get:
      tags:
        - Product
      summary: Check whether a model instance exists in the data source.
      operationId: 'Product.exists__get_products_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/products/{id}':
    head:
      tags:
        - Product
      summary: Check whether a model instance exists in the data source.
      operationId: 'Product.exists__head_products_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Product
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Product.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    delete:
      tags:
        - Product
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Product.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Product
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Product.prototype.updateAttributes__put_products_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Product'
        - name: id
          in: path
          description: Product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    patch:
      tags:
        - Product
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Product.prototype.updateAttributes__patch_products_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Product'
        - name: id
          in: path
          description: Product id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  '/products/{id}/replace':
    post:
      tags:
        - Product
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Product.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  /products/findOne:
    get:
      tags:
        - Product
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Product.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  /products/update:
    post:
      tags:
        - Product
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Product.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /products/count:
    get:
      tags:
        - Product
      summary: Count instances of the model matched by where from the data source.
      operationId: Product.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/stocks/{id}/product':
    get:
      tags:
        - Stock
      summary: Fetches belongsTo relation product.
      operationId: Stock.prototype.__get__product
      parameters:
        - name: refresh
          in: query
          required: false
          type: boolean
        - name: id
          in: path
          description: Stock id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  /stocks:
    post:
      tags:
        - Stock
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Stock.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    put:
      tags:
        - Stock
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Stock.upsert__put_stocks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    patch:
      tags:
        - Stock
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Stock.upsert__patch_stocks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    get:
      tags:
        - Stock
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Stock.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Stock'
      deprecated: false
  /stocks/replaceOrCreate:
    post:
      tags:
        - Stock
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Stock.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  /stocks/upsertWithWhere:
    post:
      tags:
        - Stock
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Stock.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  '/stocks/{id}/exists':
    get:
      tags:
        - Stock
      summary: Check whether a model instance exists in the data source.
      operationId: 'Stock.exists__get_stocks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/stocks/{id}':
    head:
      tags:
        - Stock
      summary: Check whether a model instance exists in the data source.
      operationId: 'Stock.exists__head_stocks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Stock
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Stock.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    delete:
      tags:
        - Stock
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Stock.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Stock
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Stock.prototype.updateAttributes__put_stocks_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Stock'
        - name: id
          in: path
          description: Stock id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
    patch:
      tags:
        - Stock
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Stock.prototype.updateAttributes__patch_stocks_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Stock'
        - name: id
          in: path
          description: Stock id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  '/stocks/{id}/replace':
    post:
      tags:
        - Stock
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Stock.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  /stocks/findOne:
    get:
      tags:
        - Stock
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Stock.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stock'
      deprecated: false
  /stocks/update:
    post:
      tags:
        - Stock
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Stock.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Stock'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /stocks/count:
    get:
      tags:
        - Stock
      summary: Count instances of the model matched by where from the data source.
      operationId: Stock.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tracks:
    post:
      tags:
        - Track
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Track.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Track'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
    put:
      tags:
        - Track
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Track.upsert__put_tracks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Track'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
    patch:
      tags:
        - Track
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Track.upsert__patch_tracks
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Track'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
    get:
      tags:
        - Track
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Track.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Track'
      deprecated: false
  /tracks/replaceOrCreate:
    post:
      tags:
        - Track
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Track.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Track'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
  /tracks/upsertWithWhere:
    post:
      tags:
        - Track
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Track.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Track'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
  '/tracks/{id}/exists':
    get:
      tags:
        - Track
      summary: Check whether a model instance exists in the data source.
      operationId: 'Track.exists__get_tracks_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tracks/{id}':
    head:
      tags:
        - Track
      summary: Check whether a model instance exists in the data source.
      operationId: 'Track.exists__head_tracks_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Track
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Track.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
    delete:
      tags:
        - Track
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Track.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - Track
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Track.prototype.updateAttributes__put_tracks_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Track'
        - name: id
          in: path
          description: Track id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
    patch:
      tags:
        - Track
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'Track.prototype.updateAttributes__patch_tracks_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Track'
        - name: id
          in: path
          description: Track id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
  '/tracks/{id}/replace':
    post:
      tags:
        - Track
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: Track.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Track'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
  /tracks/findOne:
    get:
      tags:
        - Track
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Track.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Track'
      deprecated: false
  /tracks/update:
    post:
      tags:
        - Track
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Track.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Track'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tracks/count:
    get:
      tags:
        - Track
      summary: Count instances of the model matched by where from the data source.
      operationId: Track.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /weathers/get-weather-forecast-data:
    get:
      tags:
        - Weather
      summary: Returns National Weather Service digital weather forecast data
      operationId: Weather.getWeatherForecastData
      parameters:
        - name: latitude
          in: query
          description: Latitude
          required: false
          type: number
          format: double
        - name: longitude
          in: query
          description: Longitude
          required: false
          type: number
          format: double
        - name: product
          in: query
          description: Product
          required: false
          type: string
        - name: startTime
          in: query
          description: Start time
          required: false
          type: string
          format: date-time
        - name: endTime
          in: query
          description: End time
          required: false
          type: string
          format: date-time
        - name: unit
          in: query
          description: Unit
          required: false
          type: string
        - name: weatherParameters
          in: query
          description: Weather Parameters
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  Principal:
    properties:
      firstName:
        description: First name
        type: string
      lastName:
        description: Last name
        type: string
      phone:
        description: Phone number
        type: string
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date-time
      lastUpdated:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - firstName
      - lastName
      - email
    additionalProperties: false
  OrderLine:
    description: Order Line Service
    properties:
      line:
        description: Order Line line number
        type: number
        format: double
      quantity:
        description: Order Line quantity
        type: number
        format: double
      id:
        type: number
        format: double
      orderId:
        type: number
        format: double
      productId:
        type: number
        format: double
    required:
      - line
      - quantity
    additionalProperties: false
  Order:
    description: Order Service
    properties:
      code:
        description: Order code
        type: string
      client:
        description: Order client
        type: string
      note:
        description: Order notes
        type: string
      shippingDate:
        type: string
        format: date-time
      status:
        description: Order status
        type: number
        format: double
      id:
        type: number
        format: double
    required:
      - code
      - client
      - status
    additionalProperties: false
  Product:
    description: Product Service
    properties:
      code:
        description: Product code
        type: string
      description:
        description: Product description
        type: string
      price:
        description: Product price
        type: number
        format: double
      active:
        description: Product status
        type: boolean
      id:
        type: number
        format: double
    required:
      - code
      - description
      - price
      - active
    additionalProperties: false
  Stock:
    description: Stock Service
    properties:
      quantity:
        description: Stock quantity
        type: number
        format: double
      status:
        description: Stock quantity
        type: number
        format: double
      id:
        type: number
        format: double
      productId:
        type: number
        format: double
      orderLineId:
        type: number
        format: double
    required:
      - quantity
      - status
    additionalProperties: false
  Track:
    description: Model Tracks
    properties:
      model:
        description: Model name
        type: string
      method:
        description: Model method executed
        type: string
      trace:
        description: Trace message
        type: string
      date:
        type: string
        format: date-time
      id:
        type: number
        format: double
    required:
      - model
      - method
      - trace
    additionalProperties: false
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: apic-training-api
  version: 1.0.1
  title: apic-training-api
  description: API Connect Training API
  contact:
    name: Miguel Salinas Gancedo
    email: miguel@thingtrack.com
    url: 'http://www.thingtrack.com'
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: >-
          https://apiconnect-e98c55c2-7329-43d6-b329-862f7003f5d3.trainingthingtrackcom-dev.apic.eu-gb.mybluemix.net
        invoke-tls-profile: 'client:Loopback-client'
    production:
      properties:
        runtime-url: >-
          https://apiconnect-3c3ba55b-4b91-427c-8ff5-8675d50050a3.trainingthingtrackcom-dev.apic.eu-gb.mybluemix.net
        invoke-tls-profile: 'client:Loopback-client'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
          tls-profile: $(invoke-tls-profile)
  properties:
    runtime-url:
      value: ''
      description: ''
      encoded: false
    invoke-tls-profile:
      value: ''
      description: ''
      encoded: false
  categories:
    - Training
